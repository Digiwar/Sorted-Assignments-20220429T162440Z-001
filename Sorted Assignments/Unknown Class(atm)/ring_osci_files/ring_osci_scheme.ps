%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
42 16141 38357 36609 clwin
46 16141 38352 36608 clwin
0 16141 38399 36608 clwin
ssls
0 800 400 slc
0 800 400 sfc
1878 0 10983 28158 dls
0 1877 18494 23464 dls
0 -1878 18494 32383 dls
5164 11267 12861 25341 dbu
-1877 0 26005 28158 dls
0 800 400 slc
0 800 400 sfc
90 0 17201 28158 dls
0 -469 17246 28158 dls
90 0 17201 27689 dls
0 -313 17425 28002 dls
17425 27912 dlt
67 67 dlv
45 23 dlv
67 0 dlv
44 -23 dlv
23 -67 dlv
0 -223 dlv
dle
17805 28002 dlt
134 -313 dlv
134 313 dlv
dle
18185 27867 dlt
268 0 dlv
0 45 dlv
-22 45 dlv
-23 22 dlv
-44 23 dlv
-67 0 dlv
-45 -23 dlv
-45 -44 dlv
-22 -68 dlv
0 -44 dlv
22 -67 dlv
45 -45 dlv
45 -22 dlv
67 0 dlv
44 22 dlv
45 45 dlv
dle
0 -313 18610 28002 dls
18610 27867 dlt
22 68 dlv
45 44 dlv
44 23 dlv
67 0 dlv
dle
18922 28158 dlt
0 -380 dlv
23 -67 dlv
45 -22 dlv
44 0 dlv
dle
157 0 18855 28002 dls
19146 27867 dlt
268 0 dlv
0 45 dlv
-22 45 dlv
-22 22 dlv
-45 23 dlv
-67 0 dlv
-45 -23 dlv
-45 -44 dlv
-22 -68 dlv
0 -44 dlv
22 -67 dlv
45 -45 dlv
45 -22 dlv
67 0 dlv
45 22 dlv
44 45 dlv
dle
0 -313 19571 28002 dls
19571 27867 dlt
22 68 dlv
45 44 dlv
45 23 dlv
67 0 dlv
dle
1000 1000 0 slc
1000 1000 0 sfc
90 0 11028 33322 dls
0 -470 11073 33322 dls
90 0 11028 32852 dls
11363 33322 dlt
-67 -22 dlv
-44 -67 dlv
-23 -112 dlv
0 -67 dlv
23 -112 dlv
44 -67 dlv
67 -23 dlv
45 0 dlv
67 23 dlv
45 67 dlv
22 112 dlv
0 67 dlv
-22 112 dlv
-45 67 dlv
-67 22 dlv
-45 0 dlv
dle
-313 -470 11542 33322 dls
12056 33255 dlt
-357 -201 dlv
357 -202 dlv
dle
12280 33233 dlt
45 22 dlv
67 67 dlv
0 -470 dlv
dle
12638 33165 dlt
-23 -22 dlv
23 -22 dlv
22 22 dlv
-22 22 dlv
dle
12638 32897 dlt
-23 -22 dlv
23 -23 dlv
22 23 dlv
-22 22 dlv
dle
12861 33322 dlt
246 0 dlv
-134 -179 dlv
67 0 dlv
45 -22 dlv
22 -23 dlv
22 -67 dlv
0 -44 dlv
-22 -67 dlv
-45 -45 dlv
-67 -23 dlv
-67 0 dlv
-67 23 dlv
-22 22 dlv
-23 45 dlv
dle
13331 33233 dlt
44 22 dlv
67 67 dlv
0 -470 dlv
dle
13666 33255 dlt
358 -201 dlv
-358 -202 dlv
dle
224 749 1000 slc
224 749 1000 sfc
26005 27923 dpb
38211 27923 dpv
38352 28064 dpv
38352 28252 dpv
38211 28393 dpv
26005 28393 dpv
25865 28252 dpv
25865 28064 dpv
dps
12206 0 26005 28158 dls
0 4695 18494 18769 dls
186 27923 dpb
10983 27923 dpv
11124 28064 dpv
11124 28252 dpv
10983 28393 dpv
186 28393 dpv
46 28252 dpv
46 28064 dpv
dps
10797 0 186 28158 dls
0 2347 18494 32383 dls
224 749 1000 slc
224 749 1000 sfc
28461 29034 dlt
-45 -22 dlv
-44 -45 dlv
-23 -67 dlv
0 -44 dlv
23 -68 dlv
44 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
44 44 dlv
23 68 dlv
0 44 dlv
-23 67 dlv
-44 45 dlv
-45 22 dlv
-67 0 dlv
dle
28796 29034 dlt
0 -223 dlv
23 -67 dlv
44 -23 dlv
67 0 dlv
45 23 dlv
67 67 dlv
dle
0 -313 29042 29034 dls
29243 29191 dlt
0 -380 dlv
23 -67 dlv
44 -23 dlv
45 0 dlv
dle
157 0 29176 29034 dls
29847 29124 dlt
-358 -201 dlv
358 -202 dlv
dle
30071 29101 dlt
44 23 dlv
67 67 dlv
0 -470 dlv
dle
30428 29034 dlt
-22 -22 dlv
22 -22 dlv
23 22 dlv
-23 22 dlv
dle
30428 28766 dlt
-22 -22 dlv
22 -23 dlv
23 23 dlv
-23 22 dlv
dle
30652 29191 dlt
246 0 dlv
-135 -179 dlv
68 0 dlv
44 -22 dlv
23 -23 dlv
22 -67 dlv
0 -44 dlv
-22 -68 dlv
-45 -44 dlv
-67 -23 dlv
-67 0 dlv
-67 23 dlv
-23 22 dlv
-22 45 dlv
dle
31188 29191 dlt
-67 -22 dlv
-45 -68 dlv
-22 -111 dlv
0 -67 dlv
22 -112 dlv
45 -67 dlv
67 -23 dlv
45 0 dlv
67 23 dlv
45 67 dlv
22 112 dlv
0 67 dlv
-22 111 dlv
-45 68 dlv
-67 22 dlv
-45 0 dlv
dle
-313 -470 31367 29191 dls
31524 29124 dlt
357 -201 dlv
-357 -202 dlv
dle
32105 28744 dlt
-23 -23 dlv
-22 23 dlv
22 22 dlv
23 -22 dlv
0 -45 dlv
-23 -45 dlv
-22 -22 dlv
dle
32373 29034 dlt
-45 -22 dlv
-44 -45 dlv
-23 -67 dlv
0 -44 dlv
23 -68 dlv
44 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
44 44 dlv
23 68 dlv
0 44 dlv
-23 67 dlv
-44 45 dlv
-45 22 dlv
-67 0 dlv
dle
32932 28967 dlt
-23 45 dlv
-67 22 dlv
-67 0 dlv
-67 -22 dlv
-22 -45 dlv
22 -44 dlv
45 -23 dlv
112 -22 dlv
44 -22 dlv
23 -45 dlv
0 -23 dlv
-23 -44 dlv
-67 -23 dlv
-67 0 dlv
-67 23 dlv
-22 44 dlv
dle
33334 28967 dlt
-44 45 dlv
-45 22 dlv
-67 0 dlv
-45 -22 dlv
-45 -45 dlv
-22 -67 dlv
0 -44 dlv
22 -68 dlv
45 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
44 44 dlv
dle
357 0 33424 28677 dls
34027 29034 dlt
-45 -22 dlv
-44 -45 dlv
-23 -67 dlv
0 -44 dlv
23 -68 dlv
44 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
45 44 dlv
22 68 dlv
0 44 dlv
-22 67 dlv
-45 45 dlv
-45 22 dlv
-67 0 dlv
dle
34363 29034 dlt
0 -223 dlv
22 -67 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
67 67 dlv
dle
0 -313 34608 29034 dls
34810 29191 dlt
0 -380 dlv
22 -67 dlv
45 -23 dlv
44 0 dlv
dle
156 0 34743 29034 dls
3581 29034 dlt
-45 -22 dlv
-45 -45 dlv
-22 -67 dlv
0 -44 dlv
22 -68 dlv
45 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
44 44 dlv
23 68 dlv
0 44 dlv
-23 67 dlv
-44 45 dlv
-45 22 dlv
-67 0 dlv
dle
4140 28967 dlt
-23 45 dlv
-67 22 dlv
-67 0 dlv
-67 -22 dlv
-22 -45 dlv
22 -44 dlv
45 -23 dlv
112 -22 dlv
44 -22 dlv
23 -45 dlv
0 -23 dlv
-23 -44 dlv
-67 -23 dlv
-67 0 dlv
-67 23 dlv
-22 44 dlv
dle
4542 28967 dlt
-45 45 dlv
-44 22 dlv
-67 0 dlv
-45 -22 dlv
-45 -45 dlv
-22 -67 dlv
0 -44 dlv
22 -68 dlv
45 -44 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
45 44 dlv
dle
358 0 4631 28677 dls
5235 29034 dlt
-45 -22 dlv
-44 -45 dlv
-23 -67 dlv
0 -44 dlv
23 -68 dlv
44 -44 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
45 44 dlv
22 68 dlv
0 44 dlv
-22 67 dlv
-45 45 dlv
-45 22 dlv
-67 0 dlv
dle
5570 29034 dlt
0 -223 dlv
23 -67 dlv
44 -23 dlv
67 0 dlv
45 23 dlv
67 67 dlv
dle
0 -313 5816 29034 dls
6017 29191 dlt
0 -380 dlv
23 -67 dlv
44 -23 dlv
45 0 dlv
dle
157 0 5950 29034 dls
6308 28744 dlt
-22 -23 dlv
-23 23 dlv
23 22 dlv
22 -22 dlv
0 -45 dlv
-22 -45 dlv
-23 -22 dlv
dle
6576 29034 dlt
-44 -22 dlv
-45 -45 dlv
-22 -67 dlv
0 -44 dlv
22 -68 dlv
45 -44 dlv
44 -23 dlv
67 0 dlv
45 23 dlv
45 44 dlv
22 68 dlv
0 44 dlv
-22 67 dlv
-45 45 dlv
-45 22 dlv
-67 0 dlv
dle
6912 29034 dlt
0 -223 dlv
22 -67 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
67 67 dlv
dle
0 -313 7157 29034 dls
7359 29191 dlt
0 -380 dlv
22 -67 dlv
45 -23 dlv
44 0 dlv
dle
156 0 7292 29034 dls
7962 29124 dlt
-357 -201 dlv
357 -202 dlv
dle
8186 29101 dlt
44 23 dlv
68 67 dlv
0 -470 dlv
dle
8543 29034 dlt
-22 -22 dlv
22 -22 dlv
23 22 dlv
-23 22 dlv
dle
8543 28766 dlt
-22 -22 dlv
22 -23 dlv
23 23 dlv
-23 22 dlv
dle
8767 29191 dlt
246 0 dlv
-134 -179 dlv
67 0 dlv
45 -22 dlv
22 -23 dlv
22 -67 dlv
0 -44 dlv
-22 -68 dlv
-45 -44 dlv
-67 -23 dlv
-67 0 dlv
-67 23 dlv
-22 22 dlv
-23 45 dlv
dle
9303 29191 dlt
-67 -22 dlv
-44 -68 dlv
-23 -111 dlv
0 -67 dlv
23 -112 dlv
44 -67 dlv
67 -23 dlv
45 0 dlv
67 23 dlv
45 67 dlv
22 112 dlv
0 67 dlv
-22 111 dlv
-45 68 dlv
-67 22 dlv
-45 0 dlv
dle
-313 -470 9482 29191 dls
9639 29124 dlt
357 -201 dlv
-357 -202 dlv
dle
17808 19383 dlt
-45 -22 dlv
-44 -45 dlv
-23 -45 dlv
0 -89 dlv
23 -45 dlv
44 -45 dlv
45 -22 dlv
67 -22 dlv
112 0 dlv
67 22 dlv
45 22 dlv
44 45 dlv
23 45 dlv
0 89 dlv
-23 45 dlv
-44 45 dlv
-45 22 dlv
-67 0 dlv
0 -112 dlv
dle
18166 19539 dlt
-470 0 dlv
470 313 dlv
-470 0 dlv
dle
18166 20031 dlt
-470 0 dlv
0 157 dlv
23 67 dlv
44 44 dlv
45 23 dlv
67 22 dlv
112 0 dlv
67 -22 dlv
45 -23 dlv
44 -44 dlv
23 -67 dlv
0 -157 dlv
dle
17696 33156 dlt
470 179 dlv
-470 179 dlv
dle
470 0 17696 33872 dls
17920 33872 dlt
-45 -45 dlv
-22 -45 dlv
0 -67 dlv
22 -44 dlv
45 -45 dlv
67 -22 dlv
45 0 dlv
67 22 dlv
44 45 dlv
23 44 dlv
0 67 dlv
-23 45 dlv
-44 45 dlv
dle
470 0 17696 34297 dls
17920 34297 dlt
-45 -45 dlv
-22 -45 dlv
0 -67 dlv
22 -45 dlv
45 -44 dlv
67 -23 dlv
45 0 dlv
67 23 dlv
44 44 dlv
23 45 dlv
0 67 dlv
-23 45 dlv
-44 45 dlv
dle
1000 0 0 slc
1000 0 0 sfc
6405 36373 dlt
179 -469 dlv
179 469 dlv
dle
0 -469 7121 36373 dls
7121 36150 dlt
-45 44 dlv
-45 23 dlv
-67 0 dlv
-45 -23 dlv
-44 -44 dlv
-23 -67 dlv
0 -45 dlv
23 -67 dlv
44 -45 dlv
45 -22 dlv
67 0 dlv
45 22 dlv
45 45 dlv
dle
0 -469 7545 36373 dls
7545 36150 dlt
-44 44 dlv
-45 23 dlv
-67 0 dlv
-45 -23 dlv
-45 -44 dlv
-22 -67 dlv
0 -45 dlv
22 -67 dlv
45 -45 dlv
45 -22 dlv
67 0 dlv
45 22 dlv
44 45 dlv
dle
8522 17484 dlt
-22 45 dlv
-45 44 dlv
-45 23 dlv
-89 0 dlv
-45 -23 dlv
-44 -44 dlv
-23 -45 dlv
-22 -67 dlv
0 -112 dlv
22 -67 dlv
23 -45 dlv
44 -44 dlv
45 -23 dlv
89 0 dlv
45 23 dlv
45 44 dlv
22 45 dlv
0 67 dlv
-112 0 dlv
dle
8679 17126 dlt
0 470 dlv
313 -470 dlv
0 470 dlv
dle
9170 17126 dlt
0 470 dlv
157 0 dlv
67 -23 dlv
45 -44 dlv
22 -45 dlv
22 -67 dlv
0 -112 dlv
-22 -67 dlv
-22 -45 dlv
-45 -44 dlv
-67 -23 dlv
-157 0 dlv
dle
13210 28382 dlt
22 -23 dlv
23 23 dlv
-23 22 dlv
-22 -22 dlv
dle
0 -313 13232 28225 dls
0 -313 13411 28225 dls
13411 28136 dlt
67 67 dlv
45 22 dlv
67 0 dlv
45 -22 dlv
22 -67 dlv
0 -224 dlv
dle
0 -469 13836 28225 dls
13836 28158 dlt
44 45 dlv
45 22 dlv
67 0 dlv
45 -22 dlv
45 -45 dlv
22 -67 dlv
0 -45 dlv
-22 -67 dlv
-45 -44 dlv
-45 -23 dlv
-67 0 dlv
-45 23 dlv
-44 44 dlv
dle
14261 28225 dlt
0 -223 dlv
22 -67 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
67 67 dlv
dle
0 -313 14506 28225 dls
14708 28382 dlt
0 -380 dlv
22 -67 dlv
45 -23 dlv
44 0 dlv
dle
156 0 14641 28225 dls
18371 26026 dlt
-44 -23 dlv
-45 -45 dlv
-22 -44 dlv
0 -90 dlv
22 -44 dlv
45 -45 dlv
44 -22 dlv
68 -23 dlv
111 0 dlv
67 23 dlv
45 22 dlv
45 45 dlv
22 44 dlv
0 90 dlv
-22 44 dlv
-45 45 dlv
-45 23 dlv
-67 0 dlv
0 -112 dlv
dle
18729 26182 dlt
-469 0 dlv
469 313 dlv
-469 0 dlv
dle
18729 26674 dlt
-469 0 dlv
0 156 dlv
22 67 dlv
45 45 dlv
44 22 dlv
68 23 dlv
111 0 dlv
67 -23 dlv
45 -22 dlv
45 -45 dlv
22 -67 dlv
0 -156 dlv
dle
18260 28932 dlt
469 178 dlv
-469 179 dlv
dle
469 0 18260 29647 dls
18483 29647 dlt
-44 -45 dlv
-23 -45 dlv
0 -67 dlv
23 -44 dlv
44 -45 dlv
67 -22 dlv
45 0 dlv
67 22 dlv
45 45 dlv
22 44 dlv
0 67 dlv
-22 45 dlv
-45 45 dlv
dle
469 0 18260 30072 dls
18483 30072 dlt
-44 -45 dlv
-23 -45 dlv
0 -67 dlv
23 -45 dlv
44 -44 dlv
67 -23 dlv
45 0 dlv
67 23 dlv
45 44 dlv
22 45 dlv
0 67 dlv
-22 45 dlv
-45 45 dlv
dle
21725 28236 dlt
-45 -22 dlv
-45 -45 dlv
-22 -67 dlv
0 -44 dlv
22 -68 dlv
45 -44 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
45 44 dlv
22 68 dlv
0 44 dlv
-22 67 dlv
-45 45 dlv
-44 22 dlv
-67 0 dlv
dle
22060 28236 dlt
0 -223 dlv
22 -67 dlv
45 -23 dlv
67 0 dlv
45 23 dlv
67 67 dlv
dle
0 -313 22306 28236 dls
22507 28393 dlt
0 -380 dlv
22 -67 dlv
45 -23 dlv
45 0 dlv
dle
156 0 22440 28236 dls
0 -469 22753 28236 dls
22753 28169 dlt
45 45 dlv
44 22 dlv
67 0 dlv
45 -22 dlv
45 -45 dlv
22 -67 dlv
0 -44 dlv
-22 -68 dlv
-45 -44 dlv
-45 -23 dlv
-67 0 dlv
-44 23 dlv
-45 44 dlv
dle
23178 28236 dlt
0 -223 dlv
22 -67 dlv
45 -23 dlv
67 0 dlv
44 23 dlv
67 67 dlv
dle
0 -313 23423 28236 dls
23625 28393 dlt
0 -380 dlv
22 -67 dlv
45 -23 dlv
44 0 dlv
dle
156 0 23558 28236 dls
1000 0 0 slc
1000 0 0 sfc
8167 35716 dpb
8167 36561 dpv
8683 36561 dpv
9106 36139 dpv
8683 35716 dpv
dps
10045 16939 dpb
10045 17784 dpv
10561 17784 dpv
10983 17361 dpv
10561 16939 dpv
dps
10796 27970 11171 28346 dbs
18307 23276 18682 23652 dbs
18307 32195 18682 32571 dbs
25818 27970 26193 28346 dbs
0 16141 38400 36621 clwin
gfs
%%Trailer
%%EOF
