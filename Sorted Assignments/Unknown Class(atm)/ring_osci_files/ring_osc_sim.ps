%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
80 15985 38286 36707 clwin
90 15985 38290 36707 clwin
0 15985 38380 36707 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
2861 32412 dlt
206 -481 dlv
206 481 dlv
dle
0 -721 3856 32652 dls
3856 32309 dlt
-68 69 dlv
-69 34 dlv
-103 0 dlv
-69 -34 dlv
-68 -69 dlv
-35 -103 dlv
0 -69 dlv
35 -103 dlv
68 -68 dlv
69 -35 dlv
103 0 dlv
69 35 dlv
68 68 dlv
dle
4508 32309 dlt
-68 69 dlv
-69 34 dlv
-103 0 dlv
-68 -34 dlv
-69 -69 dlv
-34 -103 dlv
0 -69 dlv
34 -103 dlv
69 -68 dlv
68 -35 dlv
103 0 dlv
69 35 dlv
68 68 dlv
dle
618 0 4749 32343 dls
618 0 4749 32137 dls
5710 32515 dlt
68 34 dlv
103 103 dlv
0 -721 dlv
dle
6259 32000 dlt
-34 -34 dlv
34 -35 dlv
34 35 dlv
-34 34 dlv
dle
6705 32652 dlt
-103 -34 dlv
-34 -69 dlv
0 -68 dlv
34 -69 dlv
69 -34 dlv
137 -35 dlv
103 -34 dlv
69 -69 dlv
34 -68 dlv
0 -103 dlv
-34 -69 dlv
-35 -34 dlv
-103 -35 dlv
-137 0 dlv
-103 35 dlv
-34 34 dlv
-35 69 dlv
0 103 dlv
35 68 dlv
68 69 dlv
103 34 dlv
138 35 dlv
68 34 dlv
35 69 dlv
0 68 dlv
-35 69 dlv
-103 34 dlv
-137 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
6791 31301 dlt
274 -721 dlv
275 721 dlv
dle
7683 31301 dlt
-103 -35 dlv
-68 -103 dlv
-35 -171 dlv
0 -103 dlv
35 -172 dlv
68 -103 dlv
103 -34 dlv
69 0 dlv
103 34 dlv
69 103 dlv
34 172 dlv
0 103 dlv
-34 171 dlv
-69 103 dlv
-103 35 dlv
-69 0 dlv
dle
-481 -721 7958 31301 dls
0 800 400 slc
0 800 400 sfc
0 1802 8558 34004 dls
0 -1802 8558 32202 dls
0 -540 8558 32922 dls
541 0 8288 33553 dls
541 0 8288 32652 dls
8558 33103 991 901 delu
0 -2703 19370 31301 dls
18469 28598 dpb
20271 28598 dpv
19370 27697 dpv
dpu
0 -3604 8558 26796 dls
0 -3604 10360 26796 dls
7207 18019 450 15985 dbu
-3604 0 22073 19588 dls
224 749 1000 slc
224 749 1000 sfc
16217 0 22073 19588 dls
0 3604 8558 26796 dls
0 901 8558 35806 dls
0 7208 12162 29499 dls
12162 29499 450 dcs
3604 0 8558 36707 dls
0 1802 13964 29499 dls
5406 0 13964 31301 dls
1802 0 10360 29499 dls
1802 0 12162 29499 dls
0 2703 10360 26796 dls
224 749 1000 slc
224 749 1000 sfc
26020 20820 dlt
-86 -43 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
86 -43 dlv
129 0 dlv
85 43 dlv
86 86 dlv
43 128 dlv
0 86 dlv
-43 129 dlv
-86 86 dlv
-85 43 dlv
-129 0 dlv
dle
27092 20691 dlt
-42 86 dlv
-129 43 dlv
-129 0 dlv
-129 -43 dlv
-42 -86 dlv
42 -86 dlv
86 -43 dlv
215 -43 dlv
86 -43 dlv
42 -85 dlv
0 -43 dlv
-42 -86 dlv
-129 -43 dlv
-129 0 dlv
-129 43 dlv
-42 86 dlv
dle
27865 20691 dlt
-86 86 dlv
-86 43 dlv
-129 0 dlv
-85 -43 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
85 -43 dlv
129 0 dlv
86 43 dlv
86 86 dlv
dle
687 0 28036 20133 dls
29195 20820 dlt
-86 -43 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
86 -43 dlv
128 0 dlv
86 43 dlv
86 86 dlv
43 128 dlv
0 86 dlv
-43 129 dlv
-86 86 dlv
-86 43 dlv
-128 0 dlv
dle
29838 20820 dlt
0 -429 dlv
43 -129 dlv
86 -43 dlv
129 0 dlv
85 43 dlv
129 129 dlv
dle
0 -601 30310 20820 dls
30696 21120 dlt
0 -729 dlv
43 -129 dlv
86 -43 dlv
86 0 dlv
dle
300 0 30568 20820 dls
1000 0 0 slc
1000 0 0 sfc
20721 29919 dlt
0 -480 dlv
-30 -90 dlv
-30 -30 dlv
-60 -30 dlv
-90 0 dlv
-60 30 dlv
dle
20721 29829 dlt
-60 60 dlv
-60 30 dlv
-90 0 dlv
-60 -30 dlv
-60 -60 dlv
-30 -90 dlv
0 -60 dlv
30 -90 dlv
60 -60 dlv
60 -30 dlv
90 0 dlv
60 30 dlv
60 60 dlv
dle
0 -420 20962 29919 dls
20962 29799 dlt
90 90 dlv
60 30 dlv
90 0 dlv
60 -30 dlv
30 -90 dlv
0 -300 dlv
dle
0 -631 21863 30130 dls
21863 29829 dlt
-60 60 dlv
-61 30 dlv
-90 0 dlv
-60 -30 dlv
-60 -60 dlv
-30 -90 dlv
0 -60 dlv
30 -90 dlv
60 -60 dlv
60 -30 dlv
90 0 dlv
61 30 dlv
60 60 dlv
dle
8108 20172 dlt
901 343 dlv
-901 343 dlv
dle
901 0 8108 21545 dls
8537 21545 dlt
-86 -86 dlv
-43 -86 dlv
0 -129 dlv
43 -85 dlv
86 -86 dlv
129 -43 dlv
86 0 dlv
128 43 dlv
86 86 dlv
43 85 dlv
0 129 dlv
-43 86 dlv
-86 86 dlv
dle
901 0 8108 22360 dls
8537 22360 dlt
-86 -86 dlv
-43 -86 dlv
0 -128 dlv
43 -86 dlv
86 -86 dlv
129 -43 dlv
86 0 dlv
128 43 dlv
86 86 dlv
43 86 dlv
0 128 dlv
-43 86 dlv
-86 86 dlv
dle
10124 20631 dlt
-85 -43 dlv
-86 -86 dlv
-43 -86 dlv
0 -171 dlv
43 -86 dlv
86 -86 dlv
85 -43 dlv
129 -43 dlv
215 0 dlv
128 43 dlv
86 43 dlv
86 86 dlv
43 86 dlv
0 171 dlv
-43 86 dlv
-86 86 dlv
-86 43 dlv
-128 0 dlv
0 -215 dlv
dle
10811 20931 dlt
-901 0 dlv
901 601 dlv
-901 0 dlv
dle
10811 21875 dlt
-901 0 dlv
0 300 dlv
43 129 dlv
86 86 dlv
85 43 dlv
129 43 dlv
215 0 dlv
128 -43 dlv
86 -43 dlv
86 -86 dlv
43 -129 dlv
0 -300 dlv
dle
12866 19738 dlt
-86 -42 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
86 -43 dlv
129 0 dlv
85 43 dlv
86 86 dlv
43 128 dlv
0 86 dlv
-43 129 dlv
-86 86 dlv
-85 42 dlv
-129 0 dlv
dle
13938 19610 dlt
-42 86 dlv
-129 42 dlv
-129 0 dlv
-129 -42 dlv
-42 -86 dlv
42 -86 dlv
86 -43 dlv
215 -43 dlv
86 -43 dlv
42 -86 dlv
0 -42 dlv
-42 -86 dlv
-129 -43 dlv
-129 0 dlv
-129 43 dlv
-42 86 dlv
dle
14711 19610 dlt
-86 86 dlv
-86 42 dlv
-129 0 dlv
-85 -42 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
85 -43 dlv
129 0 dlv
86 43 dlv
86 86 dlv
dle
687 0 14882 19052 dls
16041 19738 dlt
-86 -42 dlv
-86 -86 dlv
-43 -129 dlv
0 -86 dlv
43 -128 dlv
86 -86 dlv
86 -43 dlv
128 0 dlv
86 43 dlv
86 86 dlv
43 128 dlv
0 86 dlv
-43 129 dlv
-86 86 dlv
-86 42 dlv
-128 0 dlv
dle
16684 19738 dlt
0 -429 dlv
43 -128 dlv
86 -43 dlv
129 0 dlv
85 43 dlv
129 128 dlv
dle
0 -600 17156 19738 dls
17542 20039 dlt
0 -730 dlv
43 -128 dlv
86 -43 dlv
86 0 dlv
dle
300 0 17414 19738 dls
1000 0 0 slc
1000 0 0 sfc
8198 30039 8919 30760 dbs
8198 35445 8919 36166 dbs
19010 30940 19730 31661 dbs
8198 26436 8919 27156 dbs
10000 26436 10721 27156 dbs
21712 19228 22433 19949 dbs
0 15985 38400 36707 clwin
gfs
%%Trailer
%%EOF
